// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    window.App = Ember.Application.create();
    $.ajax({
      dataType: 'json',
      url: 'API/planningpoker/planningpokersession',
      async: false,
      success: (function(_this) {
        return function(data) {
          var openSessions, session, _i, _len;
          openSessions = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            session = data[_i];
            session['requirements'] = [];
            if (session['gameState'] === 'OPEN') {
              openSessions.push(session);
            }
          }
          return App.Sessions = openSessions;
        };
      })(this)
    });
    $.ajax({
      dataType: 'json',
      url: 'API/requirementmanager/requirement',
      async: false,
      success: (function(_this) {
        return function(data) {
          var estimate, requirement, session, _i, _len, _results;
          App.Requirements = data;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            requirement = data[_i];
            _results.push((function() {
              var _j, _len1, _ref, _ref1, _results1;
              _ref = App.Sessions;
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                session = _ref[_j];
                if (_ref1 = requirement['id'], __indexOf.call(session['requirementIDs'], _ref1) >= 0) {
                  session['requirements'].push(requirement);
                  _results1.push((function() {
                    var _k, _len2, _ref2, _results2;
                    _ref2 = session['estimates'];
                    _results2 = [];
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                      estimate = _ref2[_k];
                      if (requirement['id'] === estimate['requirementID']) {
                        _results2.push(estimate['requirement'] = requirement);
                      } else {
                        _results2.push(void 0);
                      }
                    }
                    return _results2;
                  })());
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        };
      })(this)
    });
    $.ajax({
      dataType: 'json',
      url: 'API/core/user',
      async: false,
      success: (function(_this) {
        return function(data) {
          return App.Team = data;
        };
      })(this)
    });
    App.Router.map(function() {
      return this.resource('sessions', {
        path: '/'
      }, function() {
        return this.resource('session', {
          path: '/:session_uuid'
        });
      });
    });
    App.SessionsRoute = Ember.Route.extend({
      model: function() {
        return App.Sessions;
      }
    });
    App.SessionRoute = Ember.Route.extend({
      serialize: function(session) {
        return {
          session_uuid: session['uuid']
        };
      },
      model: function(params) {
        return App.Sessions.findBy('uuid', params.session_uuid);
      }
    });
    App.RequirementProgressComponent = Ember.Component.extend({
      classNames: ['progress', 'requirement-progress'],
      width: (function() {
        var estimate, numUsers, numVotes, percent, session, _i, _len, _ref;
        numUsers = App.Team.length;
        numVotes = 0;
        session = App.Sessions.findBy('uuid', this.get('uuid'));
        _ref = session['estimates'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          estimate = _ref[_i];
          if (estimate['requirementID'] === this.get('requirement')['id']) {
            numVotes++;
          }
        }
        percent = 0;
        if (numUsers > 0) {
          percent = parseInt((numVotes / numUsers) * 100);
        }
        return "" + percent + "%";
      }).property('uuid', 'requirement'),
      widthStyle: (function() {
        var estimate, numUsers, numVotes, percent, session, _i, _len, _ref;
        numUsers = App.Team.length;
        numVotes = 0;
        session = App.Sessions.findBy('uuid', this.get('uuid'));
        _ref = session['estimates'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          estimate = _ref[_i];
          if (estimate['requirementID'] === this.get('requirement')['id']) {
            numVotes++;
          }
        }
        percent = 0;
        if (numUsers > 0) {
          percent = parseInt((numVotes / numUsers) * 100);
        }
        return "width: " + percent + "%";
      }).property('uuid', 'requirement')
    });
    return App.RequirementVoteComponent = Ember.Component.extend({
      classNames: ['requirement-vote'],
      showVoteForm: false,
      voteValue: '',
      actions: {
        startVote: function() {
          return this.toggleProperty('showVoteForm');
        },
        submitVote: function() {
          var estimate, vote;
          vote = parseInt(this.voteValue);
          estimate = {
            sessionID: this.get('uuid'),
            requirementID: this.get('requirement')['id'],
            vote: vote
          };
          return $.ajax({
            type: 'POST',
            dataType: 'json',
            url: 'API/Advanced/planningpoker/planningpokersession/update-estimate-website',
            data: JSON.stringify(estimate),
            success: (function(_this) {
              return function() {
                return _this.toggleProperty('showVoteForm');
              };
            })(this),
            error: (function(_this) {
              return function() {
                return console.log('Error updating the estimate');
              };
            })(this)
          });
        }
      }
    });
  });

}).call(this);
